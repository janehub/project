<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.next.kko.account">

<!-- 아이디 중복 검사  -->
<select id="idduplicate" parameterType="java.lang.String" resultType="java.lang.Integer">
	SELECT COUNT(*) FROM ACCOUNT WHERE ID=#{id}
</select>

<!-- 유저 회원가입 -->
<insert id="userregister" parameterType="Account_Dto">
INSERT INTO ACCOUNT
(ID, PW, EMAIL, PHONE, ADDRESS, AUTH, DELFLAG, RECENTDATE, NAME, FARMNAME, FARMADDRESS, FARMTEL, DONGNUMBER)
VALUES (#{id},#{pw},#{email},#{phone},#{address},'U','N',SYSDATE, #{name}, #{farmname}, #{farmaddress}, #{farmtel}, #{dongnumber})
</insert>

<!-- 회원 로그인 -->
<select id="loginuser" parameterType="java.util.Map" resultType="Account_Dto">
SELECT ID, AUTH, FARMADDRESS, DONGNUMBER, FARMNAME
FROM ACCOUNT WHERE ID = #{id} AND PW = #{pw} AND DELFLAG = 'N'
</select>

<!-- 데이터베이스 내 암호화된 비밀번호를 비교해주는 SQL -->
<select id="selString" parameterType="java.lang.String" resultType="java.lang.String">
	SELECT PW FROM ACCOUNT WHERE ID = #{id}
</select>

<!-- 회원정보 검색 -->
<select id="usersearch" parameterType="java.lang.String" resultType="Account_Dto">
SELECT ID, PW, EMAIL, PHONE, ADDRESS, NAME, FARMNAME, FARMADDRESS, FARMTEL, DONGNUMBER
FROM ACCOUNT WHERE ID = #{id} AND DELFLAG = 'N'
</select>

<!-- 유저가 회원정보를 수정하는 기능 -->
<update id="userupdate" parameterType="Account_Dto">
UPDATE ACCOUNT
SET EMAIL= #{email}, PHONE= #{phone}, ADDRESS= #{address}, NAME= #{name}, FARMNAME= #{farmname}, FARMADDRESS= #{farmaddress}, FARMTEL= #{farmtel} 
WHERE ID= #{id}
</update>

<!-- 유저 아이디 검색 -->
<select id="userfindid" parameterType="java.util.Map" resultType="java.lang.String">
SELECT ID FROM ACCOUNT
WHERE NAME = #{name} AND PHONE= #{phone} AND EMAIL = #{email} AND DELFLAG = 'N'
</select>

<!-- 회원탈퇴 (DELFLAG) -->
<update id="userdrop" parameterType="java.lang.String">
UPDATE ACCOUNT
SET DELFLAG = 'Y'
WHERE ID = #{id}
</update>

<!-- 파스코드입력을 통한 일지 조회 -->
<select id="searchbypass" parameterType="java.lang.String" resultType="RecordIlji_Dto">
<![CDATA[SELECT PASSCODE, ILLYUNG, MEDICINE, WEATHERCON, ETC, DEATHCOUNT, WEIGHT, BUILDTEMP 
FROM RECORDILJI
WHERE PASSCODE <= #{passcode}
AND PASSCODE >= #{passcode}
AND DELFLAG = 'N'
ORDER BY ILLYUNG]]>
</select>

<!-- 년도 입력을 통한 일지 조회 -->
<select id="searchbyyear" parameterType="java.lang.String" resultType="RecordIlji_Dto">
<![CDATA[SELECT PASSCODE, RECORDDATE, ILLYUNG, MEDICINE, WEATHERCON, DEATHCOUNT, WEIGHT, BUILDTEMP, ETC
FROM RECORDILJI 
WHERE REPLACE(EXTRACT(YEAR FROM RECORDDATE),',','') <= #{year}
AND REPLACE(EXTRACT(YEAR FROM RECORDDATE),',','')  >= #{year}
AND DELFLAG = 'N'
ORDER BY ILLYUNG]]>
</select>

<!-- 월별 정보를 통한 일지 조회 -->
<select id="searchbymonth" parameterType="java.lang.String" resultType="RecordIlji_Dto">
<![CDATA[SELECT RECORDDATE, PASSCODE, ILLYUNG, MEDICINE, WEATHERCON, ETC, DEATHCOUNT, WEIGHT, BUILDTEMP
FROM RECORDILJI
WHERE REPLACE(EXTRACT(MONTH FROM RECORDDATE),',','') <= #{month}
AND REPLACE(EXTRACT(MONTH FROM RECORDDATE),',','') >= #{month}
AND DELFLAG = 'N'
ORDER BY ILLYUNG]]>
</select>

<!-- 파스코드 입력을 통한 폐사수 조회 -->
<!-- 중량과 폐사수 추가한 뒤 애들이 null 이 아닌 값 출력 -->
<select id="searchdeathcount" parameterType="java.util.Map" resultType="RecordIlji_Dto">
SELECT RECORDILJI_SEQ, PASSCODE, ILLYUNG, DEATHCOUNT, WEIGHT, BUILDTEMP, ETC, MEDICINE, DISTINCTDONG, RECORDTIME
FROM RECORDILJI
WHERE PASSCODE = #{passcode}
AND DELFLAG = 'N'
AND ILLYUNG = #{illyung}
ORDER BY DISTINCTDONG
</select>

<!-- 파스코드 입력을 통한 중량 조회 -->
<select id="searchweight" parameterType="java.lang.String" resultType="java.util.Map">
SELECT PASSCODE, ILLYUNG, WEIGHT
FROM RECORDILJI
WHERE WEIGHT IS NOT NULL
AND PASSCODE = #{passcode}
AND DELFLAG = 'N'
ORDER BY PASSCODE, ILLYUNG
</select>

<!-- 비고와 약품 내에 1차 분류를 하여 그 분류 내에 키워드 검색 하는 기능 -->
<select id="keywordsearch" parameterType="java.util.Map" resultType="RecordIlji_Dto">
 SELECT PASSCODE, ILLYUNG, HIGHTEMP, LOWTEMP, RECORDDATE, RECORDTIME, MEDICINE, WEATHERCON, ETC, DEATHCOUNT, WEIGHT, BUILDTEMP
   FROM RECORDILJI
   <if test="keyword != null">
    WHERE ${etc} LIKE '%'|| #{keyword} ||'%'
   </if>   
  ORDER BY ILLYUNG
</select>

<!-- 동별 폐사수 검색 -->
<select id="dongdeathcount" parameterType="java.util.Map" resultType="java.util.Map">
<!-- select * from RECORDILJI where regexp_like(distinctdong,'1|2|3'); -->
SELECT PASSCODE, ILLYUNG, RECORDDATE, DEATHCOUNT, DISTINCTDONG
FROM RECORDILJI
WHERE
REGEXP_LIKE (DISTINCTDONG,#{distinctdong_})
AND DEATHCOUNT IS NOT NULL
ORDER BY ILLYUNG, PASSCODE
</select>

<!-- 동별 약품 검색 -->
<select id="dongmedicine" parameterType="java.util.Map" resultType="java.util.Map">
SELECT PASSCODE, ILLYUNG, RECORDDATE, MEDICINE, DISTINCTDONG
FROM RECORDILJI
WHERE 
REGEXP_LIKE (DISTINCTDONG,#{distinctdong_})
AND MEDICINE IS NOT NULL
ORDER BY ILLYUNG, PASSCODE
</select>

<!-- 동별 비고 검색 -->
<select id="dongetc" parameterType="java.util.Map" resultType="java.util.Map">
SELECT PASSCODE, ILLYUNG, RECORDDATE, ETC, DISTINCTDONG
FROM RECORDILJI
WHERE 
REGEXP_LIKE (DISTINCTDONG,#{distinctdong})
AND ETC IS NOT NULL
ORDER BY ILLYUNG, PASSCODE
</select>

<update id="modifyilji" parameterType="java.util.Map">
UPDATE RECORDILJI
SET DEATHCOUNT = #{deathcount}, WEIGHT = #{weight}
WHERE PASSCODE = #{passcode}
AND ILLYUNG = #{illyung}
AND (DEATHCOUNT IS NOT NULL OR WEIGHT IS NOT NULL)
</update>


</mapper>